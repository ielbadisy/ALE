% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/compute_ale.R
\name{compute_ale}
\alias{compute_ale}
\title{Compute Accumulated Local Effects (ALE) for a Single Feature}
\usage{
compute_ale(model, data, feature, grid_size = 100, pred_fun = predict)
}
\arguments{
\item{model}{The predictive model object from which predictions are derived.}

\item{data}{A data frame containing the data used in the model.}

\item{feature}{A string specifying the column name of the feature for which the ALE is to be computed.}

\item{grid_size}{An integer specifying the number of intervals into which the feature range is divided for ALE computation, applicable only to continuous features.}

\item{pred_fun}{A prediction function that takes the model object and a new data frame, and returns a vector of predictions.
Default is `predict`. The prediction function should return numeric output and must be compatible with the type of model provided.}
}
\value{
A data frame with two columns: `feature` and `ALE`. For continuous features, `feature` represents the midpoints of the intervals used in the computation.
        For categorical features, `feature` represents the levels of the feature.
}
\description{
This function calculates and returns the Accumulated Local Effects (ALE) for a given feature
in a predictive model. ALE quantifies the effect of a feature on the predictions of a model,
averaged over the range of other features. It handles both categorical and continuous features.
}
\examples{
# Assuming 'model' is a previously trained model on 'data'
set.seed(123)
data <- data.frame(x1 = runif(100), x2 = runif(100))
data$y <- with(data, 2 * x1 + 3 * x2 + rnorm(100))
model <- lm(y ~ x1 + x2, data = data)

# Compute ALE for 'x1'
ale_results <- compute_ale(model, data, "x1", grid_size = 10)
print(ale_results)

}
